#!/bin/sh

source .ensambler/lib/readJSON
source .ensambler/lib/gitChecker


# SETTINGS.json
# --------------------------------------------------------------------------

# (required)
REPOSITORY_URL=`readJson settings.json Repository_URL` || exit

# (check if repository is reachable)
`gitChecker $REPOSITORY_URL` || exit

# (optional)
PROJECT_NAME=`readJson settings.json Name --optional`
PROJECT_ALIAS=`readJson settings.json Project_alias --optional`
STACK=`readJson settings.json Stack --optional`
DEVELOPERS=`readJson settings.json Developers --optional`
DEPLOY_BRANCH=`readJson settings.json Deploy_branch --optional`
PROJECT_URL=`readJson settings.json URL --optional`


# DEFAULTS
# --------------------------------------------------------------------------

PROJECT_NAME_DEFAULT=$(sed 's/-/ /g' <<< ${REPOSITORY_URL##*/})
STACK_DEFAULT="Wordpress, MySQL, PHP"
DEVELOPERS_DEFAULT="Ensambler®"
DEPLOY_BRANCH_DEFAULT="dev"
PROJECT_URL_DEFAULT="http://www.ensambler.cl/"


# GENERATED
# --------------------------------------------------------------------------

REPOSITORY_DIR="${REPOSITORY_URL##*/}"

# (for containers)
DB_CONTAINER_NAME="${REPOSITORY_DIR}-db"
PHPMYADMIN_CONTAINER_NAME="${REPOSITORY_DIR}-phpmyadmin"
WP_CONTAINER_NAME="${REPOSITORY_DIR}-wp"

# (for urls)
INSTALL_RAW_URL="$(sed "s/github.com/raw.githubusercontent.com/g" <<< $REPOSITORY_URL)/${DEPLOY_BRANCH:=$DEPLOY_BRANCH_DEFAULT}/install"
#INSTALL_SHORT_URL=$(curl -s -i https://git.io -F "url=$INSTALL_RAW_URL" | grep Location)
#INSTALL_SHORT_URL=$(sed 's/^[[:space:]]*//; s/[[:space:]]*$//' <<< ${INSTALL_SHORT_URL#*: *})


# REPLACEMENTS: git-hooks/*, install, docker-compose.yml, README-sample.md
# --------------------------------------------------------------------------

# .git-hooks files
sed "s/@db_container_name/$DB_CONTAINER_NAME/" .ensambler/src/git-hooks_/pre-commit > .ensambler/.temp
#cat .ensambler/.temp > .ensambler/src/git-hooks_/pre-commit

sed "s/@db_container_name/$DB_CONTAINER_NAME/" .ensambler/src/git-hooks_/post-merge > .ensambler/.temp
#cat .ensambler/.temp > .ensambler/src/git-hooks_/post-merge


# install file
sed "
	s,@repository_url,$REPOSITORY_URL,;
	s,@repository_dir,$REPOSITORY_DIR,;
	s,@db_container_name,$DB_CONTAINER_NAME,
" install_ > .ensambler/.temp

#cat .ensambler/.temp > install_


# docker-compose.yml file
sed "
	s/@db_container_name/$DB_CONTAINER_NAME/;
	s/@phpmyadmin_container_name/$PHPMYADMIN_CONTAINER_NAME/;
	s/@wp_container_name/$WP_CONTAINER_NAME/
" docker-compose_.yml > .ensambler/.temp

#cat .ensambler/.temp > docker-compose_.yml


# README-sample.md file
DEVELOPERS=${DEVELOPERS:=$DEVELOPERS_DEFAULT}","
DEVELOPER_LIST=""

while [[ $DEVELOPERS ]] ; do
	DEVELOPER_LIST+="- "$(sed 's/^[[:space:]]*//; s/[[:space:]]*$//' <<< ${DEVELOPERS%%","*})".\\
	" # new line.
	DEVELOPERS=${DEVELOPERS#*","}
done

sed "
	s,@project_name,${PROJECT_NAME:=$PROJECT_NAME_DEFAULT},;
	s,@developers,${DEVELOPER_LIST%\\*},;
	s,@install_url,${INSTALL_SHORT_URL:=$INSTALL_RAW_URL},;
	s,@repository_dir,$REPOSITORY_DIR,;
	s,@project_alias,${PROJECT_ALIAS:=$REPOSITORY_DIR},g;
	s,@project_url,${PROJECT_URL:=$PROJECT_URL_DEFAULT},;
	s/@stack/${STACK:=$STACK_DEFAULT}/;
	s/@year/$(date +"%Y")/
" .ensambler/src/README-sample_.md > .ensambler/.temp

#cat .ensambler/.temp > .ensambler/src/README-sample_.md

# --------------------------------------------------------------------------


rm .ensambler/.temp

# just macOs
echo "curl -L" ${INSTALL_SHORT_URL:=$INSTALL_RAW_URL} "| sh" | pbcopy

echo "
Project * $REPOSITORY_DIR * got Ensambled!
SHARE IT TO YOUR TEAM: ${INSTALL_SHORT_URL:=$INSTALL_RAW_URL} (copied to clipboard).
"

exit 0

#done.
