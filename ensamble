#!/bin/bash


#
#	ENSAMBLER Wordpress Plug Module.
#	
#	Powered by Ensambler®.
#	Developed by Diego Ulloa.
#
#	2019.
#	
#	Github:
#			@Ensambler
#			@diegoulloao
#
#
#	Website: http://www.ensambler.cl/ensambler-project
#


if [[ $0 != "/usr/local/bin/ensamble" ]] ; then
	echo "Error: you can't use ensamble script directly. Must use it through ensamble global command."
	exit 1
fi

echo -e "\nensamble module.\n"
exit





environment=${working_directory:="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"}


source ~/.ensambler/lib/readJSON


# DEFINE PARAMS PASSED
while [[ $# > 0 ]] ; do
    case "$1" in
        -f | --for )
            shift
            declare REPOSITORY_URL="$1"
            shift
        ;;

        -d | --deploy )
            shift
            declare deploy=true
        ;;

        * )
            shift
        ;;
    esac
done

exit
# PROJECT.json
# --------------------------------------------------------------------------

# (required)
REPOSITORY_URL=${REPOSITORY_URL:=`readJson $environment/project.json Repository_URL`} || exit

# (optional)
PROJECT_NAME=`readJson $environment/project.json Name --optional`
PROJECT_ALIAS=`readJson $environment/project.json Project_alias --optional`
STACK=`readJson $environment/project.json Stack --optional`
DEVELOPERS=`readJson $environment/project.json Developers --optional`
DEPLOY_BRANCH=`readJson $environment/project.json Deploy_branch --optional`
PROJECT_URL=`readJson $environment/project.json URL --optional`


# DEFAULTS
# --------------------------------------------------------------------------

PROJECT_NAME_DEFAULT=$(sed 's/-/ /g' <<< ${REPOSITORY_URL##*/})
STACK_DEFAULT="Wordpress, MySQL, PHP"
DEVELOPERS_DEFAULT="Ensambler®"
DEPLOY_BRANCH_DEFAULT="dev"
PROJECT_URL_DEFAULT="http://www.ensambler.cl/"


# GENERATED
# --------------------------------------------------------------------------

REPOSITORY_DIR="${REPOSITORY_URL##*/}"

# (for containers)
DB_CONTAINER_NAME="${REPOSITORY_DIR}-db"
PHPMYADMIN_CONTAINER_NAME="${REPOSITORY_DIR}-phpmyadmin"
WP_CONTAINER_NAME="${REPOSITORY_DIR}-wp"

# (for urls)
MOUNT_RAW_URL="$(sed "s/github.com/raw.githubusercontent.com/g" <<< $REPOSITORY_URL)/${DEPLOY_BRANCH:=$DEPLOY_BRANCH_DEFAULT}/mount"
#MOUNT_SHORT_URL=$(curl -s -i https://git.io -F "url=$MOUNT_RAW_URL" | grep Location)
#MOUNT_SHORT_URL=$(sed 's/^[[:space:]]*//; s/[[:space:]]*$//' <<< ${MOUNT_SHORT_URL#*: *})


# USER
# --------------------------------------------------------------------------

USER_NAME=`git config --get user.name`


# CONFIGURATION: git-hooks/*, mount, docker-compose.yml, README-sample.md
# --------------------------------------------------------------------------

# .git-hooks files
sed "s/@db_container_name/$DB_CONTAINER_NAME/" $environment/.ensambler/src/git-hooks/pre-commit > $environment/.ensambler/.temp
#cat $environment/.ensambler/.temp > $environment/.ensambler/src/git-hooks/pre-commit

sed "s/@db_container_name/$DB_CONTAINER_NAME/" $environment/.ensambler/src/git-hooks/post-merge > $environment/.ensambler/.temp
#cat $environment/.ensambler/.temp > $environment/.ensambler/src/git-hooks/post-merge


# mount file
sed "
	s,@repository_url,$REPOSITORY_URL,;
	s,@repository_dir,$REPOSITORY_DIR,;
	s,@db_container_name,$DB_CONTAINER_NAME,
" $environment/mount > $environment/.ensambler/.temp

#cat $environment/.ensambler/.temp > $environment/mount


# docker-compose.yml file
sed "
	s/@db_container_name/$DB_CONTAINER_NAME/;
	s/@phpmyadmin_container_name/$PHPMYADMIN_CONTAINER_NAME/;
	s/@wp_container_name/$WP_CONTAINER_NAME/
" $environment/docker-compose.yml > $environment/.ensambler/.temp

#cat $environment/.ensambler/.temp > $environment/docker-compose.yml


# README-sample.md file
DEVELOPERS=${DEVELOPERS:=$DEVELOPERS_DEFAULT}","
DEVELOPER_LIST=""

while [[ $DEVELOPERS ]] ; do
	DEVELOPER_LIST+="- "$(sed 's/^[[:space:]]*//; s/[[:space:]]*$//' <<< ${DEVELOPERS%%","*})".\\
	" # new line.
	DEVELOPERS=${DEVELOPERS#*","}
done

sed "
	s,@project_name,${PROJECT_NAME:=$PROJECT_NAME_DEFAULT},;
	s,@developers,${DEVELOPER_LIST%\\*},;
	s,@mount_url,${MOUNT_SHORT_URL:=$MOUNT_RAW_URL},;
	s,@repository_dir,$REPOSITORY_DIR,;
	s,@project_alias,${PROJECT_ALIAS:=$REPOSITORY_DIR},g;
	s,@project_url,${PROJECT_URL:=$PROJECT_URL_DEFAULT},;
	s/@stack/${STACK:=$STACK_DEFAULT}/;
	s/@year/$(date +"%Y")/
" $environment/.ensambler/src/README-template.md > $environment/.ensambler/.temp

#cat $environment/.ensambler/.temp > $environment/.ensambler/src/README-template.md


# CLEAN, UPDATE & DELETE
# --------------------------------------------------------------------------

# clean
rm $environment/.ensambler/.temp

# updates README.md
# rm $environment/README.md
# mv $environment/.ensambler/src/README-template.md $environment/README.md

# rename
# cd $environment/..
# mv wordpress-docker-startpoint $REPOSITORY_DIR
# cd $REPOSITORY_DIR


# DEPLOY SECTION
# --------------------------------------------------------------------------

if [ ! -z "$deploy" ] && [[ $deploy == true ]] ; then
	source $environment/build

	# OPERATION MESSAGES
	# --------------------------------------------------------------------------

	# just macOs
	echo "curl -L" ${MOUNT_SHORT_URL:=$MOUNT_RAW_URL} "| sh" | pbcopy

	echo "
	@${USER_NAME:="Deployer"}

	Your Project * $REPOSITORY_DIR * got Ensambled!
	SHARE IT TO YOUR TEAM: ${MOUNT_SHORT_URL:=$MOUNT_RAW_URL} (copied to clipboard).
	"

else

	# OPERATION MESSAGE
	# --------------------------------------------------------------------------

	echo "
	-> Project \"$REPOSITORY_DIR\" configured.
	Waiting for Build!
	"
fi


#done.
